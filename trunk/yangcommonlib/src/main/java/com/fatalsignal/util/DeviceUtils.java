package com.fatalsignal.util;import android.app.ActivityManager;import android.app.ActivityManager.RunningAppProcessInfo;import android.content.Context;import android.content.pm.ApplicationInfo;import android.content.pm.FeatureInfo;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.content.pm.PackageManager.NameNotFoundException;import android.content.res.Configuration;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Build;import android.os.Environment;import android.os.StatFs;import android.telephony.TelephonyManager;import android.util.DisplayMetrics;import android.util.TypedValue;import android.view.Display;import android.view.WindowManager;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.IOException;import java.lang.reflect.Field;import java.util.ArrayList;import java.util.List;public class DeviceUtils {    private static Context mContext;    public static boolean isApkDebugable(Context context) {        try {            ApplicationInfo info = context.getApplicationInfo();            return (info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;        } catch (Exception e) {        }        return false;    }    /**     * @return 包名最后一段     */    public static String getAppNameEng(Context context) {        String str = "";        str = context.getApplicationInfo().packageName.substring(context                .getApplicationInfo().packageName.lastIndexOf("."));        return str;    }    /**     * 获取版本号     *     * @return 当前应用的版本号     */    public static int getVersionCode(Context context) {        try {            PackageManager manager = context.getPackageManager();            PackageInfo info = manager.getPackageInfo(context.getPackageName(),                    0);            return info.versionCode;        } catch (Exception e) {            e.printStackTrace();        }        return 1;    }    public static String getVersionName(Context context) {        try {            PackageManager manager = context.getPackageManager();            PackageInfo info = manager.getPackageInfo(context.getPackageName(),                    0);            return info.versionName;        } catch (Exception e) {            e.printStackTrace();        }        return "1.0";    }    /**     * 检查当前设备网络是否可用     *     * @param context     * @return -1表示网络不可用，0表示mobile，1表示wifi     */    public static int isNetwotEnable(Context context) {        ConnectivityManager manager = (ConnectivityManager) context                .getSystemService(Context.CONNECTIVITY_SERVICE);        if (manager == null)            return -1;        NetworkInfo wifiInfo = manager                .getNetworkInfo(ConnectivityManager.TYPE_WIFI);        if (wifiInfo != null && wifiInfo.isConnected()) {            return 1;        }        NetworkInfo mobileInfo = manager                .getNetworkInfo(ConnectivityManager.TYPE_MOBILE);        if (mobileInfo != null && mobileInfo.isConnected()) {            return 0;        }        return -1;    }    /**     * 获取SD卡大小 1总大小，0可用大小     *     * @param type     * @return 返回可用的大小或者总大小，单位MB -1表示SD卡不可用或者type无效     */    public static long readSDCard(int type) {        String state = Environment.getExternalStorageState();        if (Environment.MEDIA_MOUNTED.equals(state)) {            File sdcardDir = Environment.getExternalStorageDirectory();            StatFs sf = new StatFs(sdcardDir.getPath());            long blockSize = sf.getBlockSize();            long blockCount = sf.getBlockCount();            long availCount = sf.getAvailableBlocks();            if (type == 1) {                return blockSize * blockCount / (1024 * 1024);            } else if (type == 0) {                return blockSize * availCount / (1024 * 1024);            } else {                return -1;            }        } else {            return -1;        }    }    public static String getCacheDir(Context context, String directory) {        if (readSDCard(0) > 0) {            return context.getExternalCacheDir().getAbsolutePath()                    + (directory == null ? "" : ("/" + directory));        } else {            return context.getCacheDir().getAbsolutePath()                    + (directory == null ? "" : ("/" + directory));        }    }    /**     * 获取系统内存大小 1总大小，0可用大小     *     * @param type     * @return 返回可用的大小或者总大小，单位MB -1表示type无效     */    public static long readSystem(int type) {        File root = Environment.getRootDirectory();        StatFs sf = new StatFs(root.getPath());        long blockSize = sf.getBlockSize();        long blockCount = sf.getBlockCount();        long availCount = sf.getAvailableBlocks();        if (type == 1) {            return blockSize * blockCount / (1024 * 1024);        } else if (type == 0) {            return blockSize * availCount / (1024 * 1024);        } else {            return -1;        }    }    /**     * @param context     * @param pkgName     * @return -2:错误的输入 -1:未安装     */    public static boolean checkIsInstall(String pkgName) {        if (pkgName == null || "".equals(pkgName))            return false;        try {            ApplicationInfo info = mContext.getPackageManager()                    .getApplicationInfo(pkgName,                            PackageManager.GET_UNINSTALLED_PACKAGES);            return true;        } catch (NameNotFoundException e) {            return false;        }    }    /**     * 获取系统所有app     *     * @return     */    public static List<PackageInfo> getAllApps() {        List<PackageInfo> packageInfos = mContext.getPackageManager()                .getInstalledPackages(0);        return packageInfos;    }    /**     * 获取非系统app     *     * @return     */    public static List<PackageInfo> getAllAppsNoSystem() {        List<PackageInfo> apps = new ArrayList<PackageInfo>();        PackageManager pManager = mContext.getPackageManager();        List<PackageInfo> paklist = pManager.getInstalledPackages(0);        for (int i = 0; i < paklist.size(); i++) {            PackageInfo pak = paklist.get(i);            if ((pak.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) <= 0) {                apps.add(pak);            }        }        return apps;    }    /**     * >=2.2     */    public static boolean hasFroyo() {        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO;    }    /**     * >=2.3     */    public static boolean hasGingerbread() {        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD;    }    /**     * >=3.0 LEVEL:11     */    public static boolean hasHoneycomb() {        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB;    }    /**     * >=3.1     */    public static boolean hasHoneycombMR1() {        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1;    }    /**     * >=4.0 14     */    public static boolean hasICS() {        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH;    }    /**     * >= 4.1 16     *     * @return     */    public static boolean hasJellyBean() {        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;    }    /**     * >= 4.2 17     */    public static boolean hasJellyBeanMr1() {        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1;    }    /**     * >= 4.3 18     */    public static boolean hasJellyBeanMr2() {        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2;    }    /**     * >=4.4 19     */    public static boolean hasKitkat() {        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;    }    public static int getSDKVersionInt() {        return Build.VERSION.SDK_INT;    }    @SuppressWarnings("deprecation")    public static String getSDKVersion() {        return Build.VERSION.SDK;    }    /**     * 获得设备的固件版本号     */    public static String getReleaseVersion() {        return StringUtils.makeSafe(Build.VERSION.RELEASE);    }    /**     * 检测是否是中兴机器     */    public static boolean isZte() {        return getDeviceModel().toLowerCase().indexOf("zte") != -1;    }    /**     * 判断是否是三星的手机     */    public static boolean isSamsung() {        return getManufacturer().toLowerCase().indexOf("samsung") != -1;    }    /**     * 检测是否HTC手机     */    public static boolean isHTC() {        return getManufacturer().toLowerCase().indexOf("htc") != -1;    }    /**     * 检测当前设备是否是特定的设备     *     * @param devices     * @return     */    public static boolean isDevice(String... devices) {        String model = DeviceUtils.getDeviceModel();        if (devices != null && model != null) {            for (String device : devices) {                if (model.indexOf(device) != -1) {                    return true;                }            }        }        return false;    }    /**     * 获得设备型号     *     * @return     */    public static String getDeviceModel() {        return StringUtils.trim(Build.MODEL);    }    /**     * 获取厂商信息     */    public static String getManufacturer() {        return StringUtils.trim(Build.MANUFACTURER);    }    /**     * 判断是否是平板电脑     *     * @param context     * @return     */    public static boolean isTablet(Context context) {        return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_LARGE;    }    /**     * 检测是否是平板电脑     *     * @param context     * @return     */    public static boolean isHoneycombTablet(Context context) {        return hasHoneycomb() && isTablet(context);    }    public static int dipToPX(final Context ctx, float dip) {        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,                dip, ctx.getResources().getDisplayMetrics());    }    /**     * 获取CPU的信息     *     * @return     */    public static String getCpuInfo() {        String cpuInfo = "";        try {            if (new File("/proc/cpuinfo").exists()) {                FileReader fr = new FileReader("/proc/cpuinfo");                BufferedReader localBufferedReader = new BufferedReader(fr,                        8192);                cpuInfo = localBufferedReader.readLine();                localBufferedReader.close();                if (cpuInfo != null) {                    cpuInfo = cpuInfo.split(":")[1].trim().split(" ")[0];                }            }        } catch (IOException e) {        } catch (Exception e) {        }        return cpuInfo;    }    /**     * 判断是否支持闪光灯     */    public static boolean isSupportCameraLedFlash(PackageManager pm) {        if (pm != null) {            FeatureInfo[] features = pm.getSystemAvailableFeatures();            if (features != null) {                for (FeatureInfo f : features) {                    if (f != null                            && PackageManager.FEATURE_CAMERA_FLASH                            .equals(f.name)) // 判断设备是否支持闪光灯                        return true;                }            }        }        return false;    }    /**     * 检测设备是否支持相机     */    public static boolean isSupportCameraHardware(Context context) {        if (context != null                && context.getPackageManager().hasSystemFeature(                PackageManager.FEATURE_CAMERA)) {            // this device has a camera            return true;        } else {            // no camera on this device            return false;        }    }    public static float getScreenDensity(Context context) {        Display display = ((WindowManager) context                .getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();        DisplayMetrics dm = new DisplayMetrics();        display.getMetrics(dm);        return dm.scaledDensity;    }    /**     * 获取屏幕宽度     */    @SuppressWarnings("deprecation")    public static int getScreenWidth(Context context) {        Display display = ((WindowManager) context                .getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();        return display.getWidth();    }    @SuppressWarnings("deprecation")    public static int getScreenHeight(Context context) {        Display display = ((WindowManager) context                .getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();        return display.getHeight();    }    public static boolean isMobileNO(String mobiles) {        if (StringUtils.isEmpty(mobiles) || StringUtils.isEmpty(mobiles.trim())) {            return false;        }        if (mobiles.length() < 11) {            return false;        }        return true;        // Pattern p =        // Pattern.compile("^((13[0-9])|(15[^4,\\D])|(18[0,5-9]))\\d{8}$");        // Matcher m = p.matcher(mobiles);        // return m.matches();    }    // 获取手机状态栏高度    public static int getStatusBarHeight(Context context) {        Class<?> c = null;        Object obj = null;        Field field = null;        int x = 0, statusBarHeight = 0;        try {            c = Class.forName("com.android.internal.R$dimen");            obj = c.newInstance();            field = c.getField("status_bar_height");            x = Integer.parseInt(field.get(obj).toString());            statusBarHeight = context.getResources().getDimensionPixelSize(x);        } catch (Exception e1) {            e1.printStackTrace();        }        return statusBarHeight;    }    /**     * @return null may be returned if the specified process not found     */    public static String getProcessName(Context cxt, int pid) {        ActivityManager am = (ActivityManager) cxt                .getSystemService(Context.ACTIVITY_SERVICE);        List<RunningAppProcessInfo> runningApps = am.getRunningAppProcesses();        if (runningApps == null) {            return null;        }        for (RunningAppProcessInfo procInfo : runningApps) {            if (procInfo.pid == pid) {                return procInfo.processName;            }        }        return null;    }    /**     * 获取设备id     *     * @return     */    public static String getDeviceId(Context context) {        TelephonyManager tm = (TelephonyManager) context                .getSystemService(Context.TELEPHONY_SERVICE);        String tmDevice, androidId;        tmDevice = "" + tm.getDeviceId();        androidId = ""                + android.provider.Settings.Secure.getString(                context.getContentResolver(),                android.provider.Settings.Secure.ANDROID_ID);        StringBuilder sb = new StringBuilder();        if (!StringUtils.isEmpty(tmDevice)) {            sb.append(tmDevice);        }        if (!StringUtils.isEmpty(androidId)) {            sb.append(androidId);        }        sb.append(Build.DEVICE);        sb.append(Build.BOARD);        sb.append(Build.BRAND);        sb.append(Build.HARDWARE);        sb.append(Build.MANUFACTURER);        sb.append(Build.MODEL);        sb.append(Build.PRODUCT);        sb.append(Build.SERIAL);        String deviceId = MD5Util.MD5Encode(sb.toString().getBytes());        return deviceId;    }    /**     * check if network avalable     *     * @param context     * @return     */    public static boolean isNetWorkConnected(Context context) {        if (context != null) {            ConnectivityManager mConnectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);            NetworkInfo mNetworkInfo = mConnectivityManager.getActiveNetworkInfo();            if (mNetworkInfo != null) {                return mNetworkInfo.isAvailable() && mNetworkInfo.isConnected();            }        }        return false;    }    /**     * check if sdcard exist     *     * @return     */    public static boolean isSdcardExist() {        return android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED);    }}