package com.aibinong.tantan.ui.activity;

// _______________________________________________________________________________________________\
//|                                                                                               |
//| Created by yourfriendyang on 16/11/7.                                                                |
//| yourfriendyang@163.com                                                                        |
//|_______________________________________________________________________________________________|

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.design.widget.AppBarLayout;
import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;

import com.aibinong.tantan.R;
import com.aibinong.tantan.constant.IntentExtraKey;
import com.aibinong.tantan.presenter.AlbumEditPresenter;
import com.aibinong.tantan.presenter.UpdateUserPresenter;
import com.aibinong.tantan.ui.dialog.SelectItemIOSDialog;
import com.aibinong.tantan.ui.widget.DraggableItemView;
import com.aibinong.tantan.ui.widget.DraggableSquareView;
import com.aibinong.tantan.util.DialogUtil;
import com.aibinong.yueaiapi.pojo.ResponseResult;
import com.aibinong.yueaiapi.pojo.UserEntity;
import com.aibinong.yueaiapi.utils.UserUtil;
import com.fatalsignal.util.DeviceUtils;
import com.fatalsignal.util.StringUtils;
import com.rengwuxian.materialedittext.MaterialEditText;
import com.tk.mediapicker.MediaPicker;
import com.tk.mediapicker.callback.Callback;
import com.tk.mediapicker.request.AlbumRequest;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;
import cn.lankton.flowlayout.FlowLayout;

public class UserInfoEditActivity extends ActivityBase implements DraggableItemView.OnItemClickListener, Callback, UpdateUserPresenter.IUpdateUser, TextWatcher {

    @Bind(R.id.tv_toolbar_title)
    TextView mTvToolbarTitle;
    @Bind(R.id.toolbar)
    Toolbar mToolbar;
    @Bind(R.id.albv_infoedit_photoedit)
    DraggableSquareView mAlbvInfoeditPhotoedit;
    @Bind(R.id.tv_infoedit_name)
    TextView mTvInfoeditName;
    @Bind(R.id.iv_infoedit_sex)
    ImageView mIvInfoeditSex;
    @Bind(R.id.tv_infoedit_age_andsoon)
    TextView mTvInfoeditAgeAndsoon;
    @Bind(R.id.tv_infoedit_tips)
    TextView mTvInfoeditTips;
    @Bind(R.id.ll_infoedit_info)
    LinearLayout mLlInfoeditInfo;
    @Bind(R.id.tv_infoedit_tags_count)
    TextView mTvInfoeditTagsCount;
    @Bind(R.id.recyclerview_infoedit_tags)
    FlowLayout mRecyclerviewInfoeditTags;
    @Bind(R.id.scroll_infoedit_content)
    ScrollView mScrollInfoeditContent;
    @Bind(R.id.edit_infoedit_declaration)
    MaterialEditText mEditInfoeditDeclaration;
    private UpdateUserPresenter mUpdateUserPresenter;
    private AlbumEditPresenter mAlbumEditPresenter;
    private UserEntity mUserEntity;
    private boolean mNeedSave;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.abn_yueai_activity_infoedit);
        ButterKnife.bind(this);
        requireTransStatusBar();
        setupToolbar(mToolbar, mTvToolbarTitle, true);
        setupView(savedInstanceState);
        mUserEntity = UserUtil.getSavedUserInfoNotNull();
        setupAlbum();
        bindData();
    }

    @Override
    protected boolean swipeBackEnable() {
        return true;
    }

    @Override
    protected void setupView(@Nullable Bundle savedInstanceState) {
        mAlbumEditPresenter = new AlbumEditPresenter();
        mUpdateUserPresenter = new UpdateUserPresenter(this);
        mLlInfoeditInfo.setOnClickListener(this);
        mAlbvInfoeditPhotoedit.setOnItemClickListener(this);
        mAlbvInfoeditPhotoedit.setAlbumEditPresenter(mAlbumEditPresenter);
        mRecyclerviewInfoeditTags.setOnClickListener(this);
        mAlbvInfoeditPhotoedit.setPosChangeListener(new DraggableSquareView.PosChangeListener() {
            @Override
            public void onPosChange(int from, int to) {
                mNeedSave = true;
                invalidateOptionsMenu();
            }
        });
        mEditInfoeditDeclaration.addTextChangedListener(this);
    }

    @Override
    protected void onResume() {
        super.onResume();
    }

    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        if (mNeedSave) {
            MenuItem menuItem = menu.findItem(R.id.abn_yueai_menuItem_commonRight);
            if (menuItem == null) {
                menuItem = menu.add(R.id.abn_yueai_default_menu_group, R.id.abn_yueai_menuItem_commonRight, 0, getString(R.string.abn_yueai_save));
                menuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
            }
        } else {
            menu.removeItem(R.id.abn_yueai_menuItem_commonRight);
        }
        return super.onPrepareOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == android.R.id.home) {
            onBackPressed();
            hideKeyboard();
            return true;
        } else if (item.getItemId() == R.id.abn_yueai_menuItem_commonRight) {
            saveUserInfo();
            hideKeyboard();
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    private void saveUserInfo() {
        //保存
        //头像
        if (mUserEntity.pictureList == null) {
            mUserEntity.pictureList = new ArrayList<>(6);
        }
        mUserEntity.pictureList.clear();
        List<DraggableItemView> validItemViews = mAlbvInfoeditPhotoedit.getValidItemViews();
        for (DraggableItemView itemView : validItemViews) {
            if (itemView.getImageUrl() != null) {
                mUserEntity.pictureList.add(itemView.getImageUrl());
            }
        }
        DialogUtil.showIndeternimateDialog(this, null).setCancelable(false);
        mUpdateUserPresenter.updateUser(mUserEntity.pictureList, mUserEntity.nickname, mUserEntity.birthdate, mUserEntity.occupation, mUserEntity.tags, StringUtils.isEmpty(mUserEntity.declaration) ? "" : mUserEntity.declaration);
    }

    private void setupAlbum() {
        mAlbvInfoeditPhotoedit.setImageUrls(mUserEntity.pictureList);
    }

    private void bindData() {

        mEditInfoeditDeclaration.removeTextChangedListener(this);
        mEditInfoeditDeclaration.setText(mUserEntity.declaration);
        mEditInfoeditDeclaration.setSelection(mEditInfoeditDeclaration.getText().length());
        mEditInfoeditDeclaration.addTextChangedListener(this);

        mTvInfoeditName.setText(mUserEntity.nickname);
        if (mUserEntity.sex == UserEntity.SEX_FEMALE) {
            mIvInfoeditSex.setImageResource(R.mipmap.abn_yueai_ic_detail_female);
        } else {
            mIvInfoeditSex.setImageResource(R.mipmap.abn_yueai_ic_detail_male);
        }
        StringBuilder ageAndSoOnSb = new StringBuilder();
        ageAndSoOnSb.append(String.format("%d岁", mUserEntity.age));
        if (!StringUtils.isEmpty(mUserEntity.constellation)) {
            ageAndSoOnSb.append(String.format(" | %s", mUserEntity.constellation));
        }
        if (!StringUtils.isEmpty(mUserEntity.occupation)) {
            ageAndSoOnSb.append(String.format(" | %s", mUserEntity.occupation));
        }
        mTvInfoeditAgeAndsoon.setText(ageAndSoOnSb.toString());

        int tagsCount = 0;
        if (mUserEntity.tags != null) {
            tagsCount = mUserEntity.tags.size();
        }
        mTvInfoeditTagsCount.setText(tagsCount + "");
        mRecyclerviewInfoeditTags.removeAllViews();
        mScrollInfoeditContent.measure(View.MeasureSpec.makeMeasureSpec(DeviceUtils.getScreenWidth(this), View.MeasureSpec.EXACTLY), View.MeasureSpec.makeMeasureSpec(DeviceUtils.getScreenHeight(this), View.MeasureSpec.EXACTLY));
        if (mUserEntity.tags != null && mUserEntity.tags.size() > 0) {
            mRecyclerviewInfoeditTags.setVisibility(View.VISIBLE);
            for (int i = 0; i < mUserEntity.tags.size(); i++) {
                View view = getLayoutInflater().inflate(R.layout.item_orange_tag, mRecyclerviewInfoeditTags, false);
                TextView tagTextView = (TextView) view.findViewById(R.id.tv_item_orange_tag);
                tagTextView.setText(mUserEntity.tags.get(i));
                ViewGroup.LayoutParams vlp = new AppBarLayout.LayoutParams((int) (mRecyclerviewInfoeditTags.getMeasuredWidth() / 4.0f), ViewGroup.LayoutParams.WRAP_CONTENT);
                mRecyclerviewInfoeditTags.addView(view, vlp);
            }

        }
        //加一个add按钮
        View addView = getLayoutInflater().inflate(R.layout.item_orange_addtag, mRecyclerviewInfoeditTags, false);
        ViewGroup.LayoutParams vlp = new AppBarLayout.LayoutParams((int) (mRecyclerviewInfoeditTags.getMeasuredWidth() / 4.0f), ViewGroup.LayoutParams.WRAP_CONTENT);
        mRecyclerviewInfoeditTags.addView(addView, vlp);

        invalidateOptionsMenu();
    }


    @Override
    public void onClick(View view) {
        if (view == mLlInfoeditInfo) {
            //进入资料编辑页
            Intent intent = EditInfoSubActivity.launchIntent(this, false, mUserEntity);
            startActivityForResult(intent, REQUEST_CODE_EDITSUBINFO);
        } else if (view == mRecyclerviewInfoeditTags) {
            Intent intent = TagsEditActivity.launchIntent(this, false, mUserEntity);
            startActivityForResult(intent, REQUEST_CODE_EDITTAGS);
        } else {
            super.onClick(view);
        }
    }

    private static final int REQUEST_CODE_PICK_MEIDA = 0x100;
    private static final int REQUEST_CODE_EDITSUBINFO = 0x101;
    private static final int REQUEST_CODE_EDITTAGS = 0x102;

    private int mCurrentSelectImagePos = 0;

    private void selectPhoto(int position) {
        mCurrentSelectImagePos = position;
        //增加图
        MediaPicker.startRequest(new AlbumRequest.Builder(this, REQUEST_CODE_PICK_MEIDA)
                .needCrop(true)
                .asSystem(false)
                .asSingle(true)
                .showCameraIndex(true)
                .showVideoContent(false)
                .setCheckLimit(9)
                .maxCropWidth(800)
                .cropRatioWh(1.0f)
                .build());
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {

        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode != RESULT_OK) {
            return;
        }
        switch (requestCode) {
            case REQUEST_CODE_PICK_MEIDA:
                MediaPicker.onMediaResult(resultCode, data, this);
                break;
            case REQUEST_CODE_EDITSUBINFO:
                UserEntity userEntity = (UserEntity) data.getSerializableExtra(IntentExtraKey.INTENT_EXTRA_KEY_USERINFO);
                if (userEntity != null) {
                    mUserEntity.nickname = userEntity.nickname;
                    mUserEntity.age=userEntity.age;
                    mUserEntity.constellation=userEntity.constellation;
                    mUserEntity.birthdate = userEntity.birthdate;
                    mUserEntity.occupation = userEntity.occupation;
                    mNeedSave = true;
                    bindData();

                }
                break;
            case REQUEST_CODE_EDITTAGS:
                UserEntity userEntity2 = (UserEntity) data.getSerializableExtra(IntentExtraKey.INTENT_EXTRA_KEY_USERINFO);
                if (userEntity2 != null) {
                    mUserEntity.tags = userEntity2.tags;
                    mNeedSave = true;
                    bindData();
                }
                break;

            default:
        }
    }

    @Override
    public void onComplete(File source) {
        mAlbvInfoeditPhotoedit.addImageFile(source, mCurrentSelectImagePos);
        mNeedSave = true;
        invalidateOptionsMenu();
    }

    @Override
    public void onComplete(List<File> sourceList) {

    }

    @Override
    public void onItemClick(final DraggableItemView itemView, final int status) {
        if (itemView == null || !itemView.isDraggable()) {
            //点了没有图片的格子
            selectPhoto(status);
        } else {
            //删除、重新上传
            //删除 重新上传 取消
            ArrayList<String> mMenuItemList = new ArrayList<>();
            mMenuItemList.add(getString(R.string.abn_yueai_album_edit_photo));
            mMenuItemList.add(getString(R.string.abn_yueai_album_edit_delete));

            if (itemView != null && itemView.isUploadError()) {
                //如果上传失败，就增加重新上传一项
                mMenuItemList.add(getString(R.string.abn_yueai_album_edit_reupload));
            }

            SelectItemIOSDialog selectItemIOSDialog = SelectItemIOSDialog.newInstance(mMenuItemList);
            selectItemIOSDialog.show(new SelectItemIOSDialog.SelectItemCallback() {
                @Override
                public void onSelectItem(int pos) {
                    //0 拍照、选照片
                    if (pos == 0) {
                        selectPhoto(status);
                    }
                    //1 删除
                    else if (pos == 1) {
                        mAlbvInfoeditPhotoedit.deleteImage(itemView);
                        mNeedSave = true;
                        invalidateOptionsMenu();
                    }
                    //2 重新上传
                    else if (pos == 2) {
                        mAlbvInfoeditPhotoedit.reUploadImage(itemView);
                    }
                }

                @Override
                public void onSelectNone() {

                }
            }, getFragmentManager(), null);
        }
    }

    @Override
    public void onUpdateUserFailed(ResponseResult e) {
        showErrDialog(e);
    }

    @Override
    public void onUpdateUserSuccess(UserEntity userEntity) {
        DialogUtil.hideDialog(this);
        mNeedSave = false;
        invalidateOptionsMenu();

        UserUtil.saveUserInfo(mUserEntity);
        mEditInfoeditDeclaration.requestFocus();
    }

    private AlertDialog exitDialog;

    @Override
    public void onBackPressed() {

        if (mNeedSave) {
            //提示是否保存
            if (exitDialog == null) {
                exitDialog = new AlertDialog.Builder(this).create();

                exitDialog.setButton(Dialog.BUTTON_NEGATIVE, "放弃更改",
                        new DialogInterface.OnClickListener() {

                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.dismiss();
                                finish();
                            }
                        });
                exitDialog.setButton(Dialog.BUTTON_NEUTRAL, "保存更改", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        saveUserInfo();
                    }
                });
                exitDialog.setButton(Dialog.BUTTON_POSITIVE, "取消", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });
                exitDialog.setMessage("当前改动未保存，确定要退出吗？");
            } else {
                if (exitDialog.isShowing()) {
                    exitDialog.dismiss();
                    return;
                }
            }
            exitDialog.show();
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public void beforeTextChanged(CharSequence s, int start, int count, int after) {

    }

    @Override
    public void onTextChanged(CharSequence s, int start, int before, int count) {
        String declaration = s.toString();
        if (!declaration.equals(mUserEntity.declaration)) {
            //更新内心独白
            mUserEntity.declaration = declaration;
            mNeedSave = true;
            invalidateOptionsMenu();
        }
    }

    @Override
    public void afterTextChanged(Editable s) {

    }
}
