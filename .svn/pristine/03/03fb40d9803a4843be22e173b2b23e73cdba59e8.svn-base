package com.aibinong.tantan.ui.activity;import android.annotation.SuppressLint;import android.content.Context;import android.content.Intent;import android.os.Build;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentPagerAdapter;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewPager;import android.support.v4.view.ViewPager.OnPageChangeListener;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import com.aibinong.tantan.R;import com.aibinong.tantan.ui.fragment.GuideFragment1;import com.aibinong.tantan.ui.fragment.GuideFragment2;import com.aibinong.tantan.ui.fragment.GuideFragment3;import com.aibinong.yueaiapi.utils.ConfigUtil;import java.util.ArrayList;import butterknife.Bind;import butterknife.ButterKnife;/** * 引导Activity */@SuppressLint("NewApi")public class GuideActivity extends ActivityUnRegisterBase implements OnPageChangeListener {    private static final String TAG = GuideActivity.class.getName();    private boolean isLastPage = false;    private boolean isDragPage = false;    private boolean canJumpPage = true;    @Bind(R.id.pager_guide)    ViewPager mPagerGuide;    private GuideFragAdapter mGuideFragAdapter;    //    @Bind(R.id.indicator_guide)//    CirclePageIndicator mIndicatorGuide;    public static Intent launchIntent(Context context) {        Intent intent = new Intent(context, GuideActivity.class);        context.startActivity(intent);        return intent;    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_guide);        ButterKnife.bind(this);        requireTransStatusBar();        if (ConfigUtil.getInstance().isNeedGuide()) {        }else {            Intent intent = new Intent(this, SplashActivity.class);            startActivity(intent);            finish();        }        bindViews();        ConfigUtil.getInstance().seGuideShowed();//        RefWatcher refWatcher = TanTanApplication.getRefWatcher(this);//        refWatcher.watch(this);    }    protected void requireTransStatusBar() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {//            if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) {//                getWindow()//                        .setStatusBarColor(//                                getResources().getColor(//                                        R.color.color_common_textwhite));//                getWindow()//                        .setNavigationBarColor(//                                getResources().getColor(//                                        R.color.color_common_textwhite));////            } else            {                // 4.4的话半透明状态栏                getWindow().addFlags(                        WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);//                getWindow().addFlags(//                        WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);            }        }    }    private void bindViews() {        mGuideFragAdapter = new GuideFragAdapter(getSupportFragmentManager());        mPagerGuide.setAdapter(mGuideFragAdapter);        mPagerGuide.setOnPageChangeListener(this);//        mIndicatorGuide.setViewPager(mPagerGuide);    }    @Override    protected void setupView(@Nullable Bundle savedInstanceState) {    }    @Override    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {        if (isLastPage && isDragPage && positionOffsetPixels == 0) {   //当前页是最后一页，并且是拖动状态，并且像素偏移量为0            if (canJumpPage) {                canJumpPage = false;                JumpToNext();            }        }    }    private void JumpToNext() {        //结束当前页        Intent intent = new Intent(this, SplashActivity.class);        startActivity(intent);        ConfigUtil.getInstance().seGuideShowed();        finish();    }    @Override    public void onPageSelected(int position) {        isLastPage = position == mGuideFragAdapter.getCount() - 1;    }    @Override    public void onPageScrollStateChanged(int state) {        isDragPage = state == 1;    }    class GuidePagerAdapter extends PagerAdapter {        private ArrayList<View> views;        public GuidePagerAdapter(ArrayList<View> views) {            this.views = views;        }        @Override        public int getCount() {            return views.size();        }        @Override        public boolean isViewFromObject(View view, Object object) {            return view == object;        }        @Override        public Object instantiateItem(ViewGroup container, int position) {            container.addView(views.get(position), 0);            return views.get(position);        }        @Override        public void destroyItem(ViewGroup container, int position, Object object) {            container.removeView(views.get(position));        }    }    class GuideFragAdapter extends FragmentPagerAdapter {        public ArrayList<Fragment> mFragments = new ArrayList<>(3);        public GuideFragAdapter(FragmentManager fm) {            super(fm);            GuideFragment1 guideFragment1 = GuideFragment1.newInstance();            GuideFragment2 guideFragment2 = GuideFragment2.newInstance();            GuideFragment3 guideFragment3 = GuideFragment3.newInstance();            mFragments.add(guideFragment1);            mFragments.add(guideFragment2);            mFragments.add(guideFragment3);        }        @Override        public Fragment getItem(int position) {            return mFragments.get(position);        }        @Override        public int getCount() {            return mFragments.size();        }    }}